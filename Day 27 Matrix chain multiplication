#include <bits/stdc++.h>

int solveMem(vector < int > & arr, int i, int j, vector < vector < int >> & dp)

{

    if (i >= j)

        return 0;

    if (dp[i][j] != -1)

        return dp[i][j];

    int ans = INT_MAX;

    for (int k = i; k <= j - 1; k++)

    {

        int tempans = solveMem(arr, i, k, dp) + solveMem(arr, k + 1, j, dp) + arr[i - 1] * arr[k] * arr[j];

        if (tempans < ans)

            ans = tempans;

    }

    return dp[i][j] = ans;

}

int matrixMultiplication(vector < int > & arr, int N)

{

    vector < vector < int >> dp(N, vector < int > (N, -1));

    return solveMem(arr, 1, N - 1, dp);

    // Tabulation Method        

    vector < vector < int >> dp(N, vector < int > (N, 0));

    for (int i = 1; i < N; i++)

    {

        for (int j = 1; j < N; j++)

        {

            if (i == j)

                dp[i][j] = 0;

        }

    }

    for (int i = N - 1; i >= 1; i--)

    {

        for (int j = i + 1; j < N; j++)

        {

            int ans = INT_MAX;

            for (int k = i; k < j; k++)

            {

                int tempans = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j];

                ans = min(ans, tempans);

            }

            dp[i][j] = ans;

        }

    }

    return dp[1][N - 1];

}
