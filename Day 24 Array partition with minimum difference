#include<bits/stdc++.h>
bool func(int ind, int target, vector<int>& arr, vector<vector<int>>& dp){
    if(target==0){
        return true;
    }
    if(ind==arr.size()-1){
        return target==arr[arr.size()-1];
    }
    if(dp[ind][target]!=-1){
        return dp[ind][target];
    }
    bool not_take = func(ind+1,target,arr,dp);
    bool take = false;
    if(arr[ind]<=target){
        take=func(ind+1,target-arr[ind],arr,dp);
    }
    return dp[ind][target] = (take|not_take);
}


int minSubsetSumDifference(vector<int>& arr, int n)
{
    // Write your code here.
    int target=accumulate(arr.begin(),arr.end(),0);
    int ans=INT_MAX;
    vector<vector<int>> dp(n,vector<int>(target+1,-1));
    for(int i=0;i<=target;i++){
        if(func(0,i,arr,dp)){
            ans = min(ans,abs(2*i-target));
        }
    }
    return ans;
}


