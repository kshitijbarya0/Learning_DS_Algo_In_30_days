#include <bits/stdc++.h>

int helper(string &a,string &b,string &c,int i,int j,vector<vector<int>>&dp) {
	if(i==a.length() && j==b.length() && i+j==c.length()) {
		return dp[i][j]=1;
	}
	if(dp[i][j]!=-1) {
		return dp[i][j];
	}
	if(i<a.length() && j<b.length() && i+j<c.length() && a[i]==b[j] && a[i]==c[i+j]) {
		if(dp[i+1][j]==-1) {
			dp[i+1][j]=helper(a,b,c,i+1,j,dp);
		}
		if(dp[i][j+1]==-1) {
			dp[i][j+1]=helper(a,b,c,i,j+1,dp);
		}
		return dp[i][j]=dp[i+1][j] || dp[i][j+1];
	}
	else if(i<a.length() && i+j<c.length() && a[i]==c[i+j]) {
		if(dp[i+1][j]==-1) {
			dp[i+1][j]=helper(a,b,c,i+1,j,dp);
		}
		return dp[i][j]=dp[i+1][j];
	}
	else if(j<b.length() && i+j<c.length() && b[j]==c[i+j]) {
		if(dp[i][j+1]==-1) {
			dp[i][j+1]=helper(a,b,c,i,j+1,dp);
		}
		return dp[i][j]=dp[i][j+1];
	}
	else {
		return dp[i][j]=0;
	}
}

bool isInterleave(string a, string b, string c){
	if(c.length()!=a.length()+b.length()) {
		return false;
	}
	vector<vector<int>>dp(a.length()+1,vector<int>(b.length()+1,-1));
	return helper(a,b,c,0,0,dp);
}
