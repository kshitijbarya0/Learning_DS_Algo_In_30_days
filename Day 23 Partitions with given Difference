#include <bits/stdc++.h> 

int countPartitions(int n, int d, vector<int> &arr) {
    // we just need to know the first subset which will cause diff 
    // s1-s2=diff
    // s1+s2=sum
    // s1=(diff+sum)/2
    int sum=0;
    int mod=(int)1e9+7;
    for(int i:arr)sum=(sum+i)%(int)(1e9+7);
    int s1=(d+sum)/2;
     if((d+sum)%2 != 0) return 0;
    // now we just need to find number of subsets satisfying s1 and will create diff d
    // standard dp knapsack subst sum question
    vector<vector<int>>dp(n+1,vector<int>(s1+1,0));
    // intialization
    for(int i=0;i<=n;i++){
        // when sum is 0
        dp[i][0]=1;
    }
    for(int i=1;i<=n;i++){
        for(int j=0;j<=s1;j++){
            if(arr[i-1]<=j)dp[i][j]=(dp[i-1][j]%mod+dp[i-1][j-arr[i-1]]%mod)%mod;
            else dp[i][j]=dp[i-1][j]%mod;
        }
    }
    return dp[n][s1]%mod;
}

 
